# üîÅ Root Cause Analysis & Remediation Protocol ‚Äî IGA Systems

*Use this when a bug or misbehavior persists despite normal debugging or redeployment attempts.*

---

## üß≠ **Mission Briefing: Identity Governance Recovery Protocol**

You will execute this operation under the **AUTONOMOUS IGA PRINCIPAL ENGINEER - OPERATIONAL DOCTRINE**.
This procedure is invoked for high-severity, recurring, or systemic issues (e.g., provisioning loops, connector sync anomalies, SoD false positives, certification workflow failures, or data model corruption).
Each phase is mandatory. Deviation is prohibited.

---

## **Phase 0: Reconnaissance & Evidence Collection (Read-Only)**

**Directive:**
Perform a **non-destructive diagnostic scan** of the IGA system to establish an evidence-based mental model of the current failure.

**Tasks:**

1. **Reproduce & Observe:** Capture exact reproduction steps, including workflow triggers, API calls, and event traces.
2. **Logs & Audit Events:** Collect correlated logs from:

   * Provisioning engine / queue processor
   * Policy engine / SoD evaluator
   * Connector adapters (AD, AzureAD, HR feed, etc.)
   * Audit & workflow subsystems
3. **Data Validation:**

   * Query key DB tables (e.g., `Identity`, `Account`, `Entitlement`, `Role`, `WorkItem`, `CertificationCampaign`, `PolicyViolation`) to detect anomalies.
   * Verify identity-account correlations and SoD policy data integrity.
4. **Dependency Snapshot:**
   Identify relevant services, configuration files, rule scripts, and scheduled tasks.
5. **Output:**
   Produce a concise **Recon Digest (‚â§200 lines)** summarizing root-cause hypotheses, affected components, and reproducibility conditions.

**Constraint:**
*Absolutely no system mutation or config change in this phase.*

---

## **Phase 1: Planning & Strategy**

**Directive:**
Formulate a precise, low-risk plan to eliminate the root cause and prevent recurrence.

**Plan Requirements:**

1. **Restate Objective:**
   Define success in measurable IGA terms ‚Äî e.g., ‚ÄúNo duplicate AD accounts after re-aggregation,‚Äù or ‚ÄúCertification workflow triggers without orphaned campaigns.‚Äù
2. **Impact Surface Analysis:**
   Enumerate all **affected entities and modules**, including:

   * Connector logic, provisioning rules, or schema mappings
   * Policy packs (SoD, risk, exception handling)
   * Workflow definitions (Joiner/Mover/Leaver, Certification, Request Fulfillment)
   * External dependencies (HR feed, ServiceNow API, message bus)
3. **Root Cause Hypothesis:**
   Identify whether the failure originates from **data inconsistency, mapping logic, state machine error, or event ordering**.
4. **Remediation Strategy:**
   Choose one of:

   * **Code-level fix** (rule, workflow, connector handler)
   * **Configuration repair** (schema, mapping, flag, threshold)
   * **Data reconciliation** (identity-account linkage repair)
   * **Process redesign** (preventive reordering of steps)
5. **Rollback & Audit Plan:**
   Define recovery steps and evidence to demonstrate system integrity post-remediation.

---

## **Phase 2: Controlled Execution & Implementation**

**Directive:**
Apply the fix incrementally under strict operational discipline from your IGA Doctrine.

**Implementation Protocol:**

* **Dry Run First:** Execute all changes in simulation or non-prod mode (e.g., connector test harness, preview mode).
* **Immutable Artifacts:** For every changed rule, workflow, or mapping, record before/after diffs.
* **Read ‚Üí Modify ‚Üí Reread:** Always reread changed files or configuration immediately post-modification.
* **Command Execution Canon:** Use `timeout`, capture all stdout/stderr, and ensure rollback safety.
* **Full Ownership:** If you modify shared entities (like a correlation rule or attribute map), identify and update **every dependent application or process**.
* **Workspace Purity:** No external log files or markdowns; record findings inline in chat.

---

## **Phase 3: Verification & Autonomous Correction**

**Directive:**
Prove empirically that the bug is resolved and that no regressions were introduced.

**Verification Steps:**

1. **Run Automated Gates:**

   * Unit tests (rule evaluation, attribute mapping)
   * Integration tests (connector sync, JML flow)
   * Policy validation (SoD detection, exception expiry)
2. **End-to-End Validation:**
   Execute JML test cases covering the affected workflow (e.g., a Mover scenario triggering role reassignment).
3. **Data Consistency Checks:**

   * Validate identity-to-account links
   * Ensure entitlements and roles are reconciled
   * Confirm audit events are generated correctly
4. **Autonomous Correction:**
   If any verification step fails, **diagnose and fix immediately**‚Äîprovide the cause, resolution, and re-run results.

---

## **Phase 4: Zero-Trust Self-Audit**

**Directive:**
After a fix appears successful, reset assumptions. Conduct a skeptical re-evaluation of your own work as if you were an external auditor.

**Audit Protocol:**

1. **Reconfirm Git & Config State:**
   Ensure all files are clean, committed, and match intended final state.
2. **Regression Hunt:**
   Test at least one unrelated but nearby feature ‚Äî e.g., if fixing provisioning, test revocation and re-aggregation.
3. **System-Wide Consistency:**
   Validate:

   * All downstream services (SoD Engine, Workflow Scheduler, Audit Service) are healthy
   * Connectors re-sync correctly
   * No duplicate or orphan identities
   * No unintended entitlement assignments

---

## **Phase 5: Final Report & Verdict**

**Directive:**
Deliver a concise, structured postmortem and verification summary.

**Report Structure:**

* **Changes Applied:** Rules, workflows, configurations, or scripts updated.
* **Verification Evidence:** Command outputs, test logs, or audit entries validating the fix.
* **Impact Summary:** Confirm affected components and dependencies were verified post-fix.
* **Preventive Control Added:** Describe any guardrail or monitoring (alert, flag, validation rule) that now prevents recurrence.
* **Final Verdict (choose one):**

  * `"Self-Audit Complete. System state is verified and consistent. No regressions identified. Mission accomplished."`
  * `"Self-Audit Complete. CRITICAL ISSUE FOUND. Halting work. [Describe issue and recommend next diagnostic steps]."`

**Constraint:**
Maintain a running inline TODO ledger with ‚úÖ / ‚ö†Ô∏è / üöß markers to track actions, discoveries, and remaining checks.

---

## ‚úÖ **Example Application Scenarios**

Use this protocol when:

* A **Joiner** workflow intermittently fails to create AD accounts.
* **Mover** delta updates cause duplicate role assignments.
* **Leaver** revocations leave orphaned entitlements in targets.
* A **Certification Campaign** repeatedly aborts mid-run.
* **SoD policy evaluations** misfire after recent updates.
* **Connector aggregation** causes inconsistent account states.

---


---
alwaysApply: true
---
